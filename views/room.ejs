<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meet</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
      document.title += " | " + ROOM_ID;
    </script>
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/assets/images/favicon.png"
    />

    <!-- libraries -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <script defer src="lib/peerjs.min.js"></script>
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-auth.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>

    <!-- scripts -->
    <script src="/js/firebaselogin.js"></script>
    <script src="/js/logout.js"></script>
    <script src="script.js" defer></script>

    <!-- css -->
    <link rel="stylesheet" href="/styles/room.css" />

    <style>
      .todo {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        display: none;
        z-index: 1000;
        width: 250px;
      }

      .todo-toggle {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1001;
      }

      .main__header {
        margin-top: 0;
      }

      #todo-list {
        list-style-type: none;
        padding-left: 0;
      }

      .main__message_container {
        display: flex;
        gap: 5px;
        margin-top: 10px;
      }

      .timer-widget {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: white;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 250px;
        z-index: 1000;
      }
      .timer-display {
        font-size: 24px;
        text-align: center;
        margin-bottom: 10px;
      }
      .controls {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }
      .timer-widget button {
        padding: 5px 10px;
        font-size: 12px;
        cursor: pointer;
      }
      .timer-types {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }
      .timer-type {
        padding: 5px;
        cursor: pointer;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 12px;
      }
      .timer-type.active {
        background-color: #e0e0e0;
        font-weight: bold;
      }
      .timer-settings {
        font-size: 12px;
      }
      .timer-settings input {
        width: 40px;
        margin-right: 5px;
      }
    </style>
  </head>
  <body>
    <div class="dark-light">
      <svg
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="1.5"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
      </svg>
    </div>
    <div class="app">
      <div class="wrapper">
        <div class="main">
          <div class="main__left">
            <div class="main__videos">
              <div id="video-grid"></div>
            </div>
            <!-- Main button controls -->
            <div class="main__controls">
              <div class="main__controls__block">
                <div
                  onclick="muteUnmute()"
                  class="main__controls__button main__mute_button"
                >
                  <i class="fas fa-microphone"></i>
                  <span>Mute</span>
                </div>
                <div
                  onclick="playStop()"
                  class="main__controls__button main__video_button"
                >
                  <i class="fas fa-video"></i>
                  <span>Stop Video</span>
                </div>
                <div onclick="screenshare()" class="main__controls__button">
                  <i class="fas fa-photo-video"></i>
                  <span>ScreenShare</span>
                </div>
              </div>
              <div class="main__controls__block">
                <div
                  onclick="window.location.href='/home'"
                  class="main__controls__button"
                >
                  <span class="leave_meeting"
                    ><a href="/home">Leave Meeting</a></span
                  >
                </div>
              </div>
              <div class="main__controls__block">
                <div
                  onclick="window.location.href='/chat/'+ROOM_ID"
                  class="main__controls__button"
                >
                  <span class="leave_meeting"
                    ><a onclick="window.location.href='/chat/'+ROOM_ID;"
                      >Go Back to ChatRoom</a
                    ></span
                  >
                </div>
              </div>
            </div>
          </div>
          <!-- The chat window -->
          <div class="main__right">
            <div class="main__header" style="margin-top: 20px">
              <h4>Chat</h4>
            </div>
            <div class="main__chat_window">
              <ul class="messages"></ul>
            </div>
            <div class="main__message_container">
              <input
                id="chat_message"
                type="text"
                placeholder="Type message here..."
              />
            </div>
          </div>

          <button class="todo-toggle" onclick="toggleTodo()">To-Do List</button>

          <div class="todo">
            <div class="main__header" style="margin-top: 20px">
              <h4>To-Do List</h4>
            </div>
            <div class="main__todo_window">
              <ul id="todo-list"></ul>
            </div>
            <div class="main__message_container">
              <input
                id="todo_input"
                type="text"
                placeholder="Add new task..."
              />
              <button onclick="addTodo()">Add</button>
            </div>
          </div>
          
        </div>
      </div>
    </div>

    <div class="timer-widget">
      <div class="timer-types">
        <div class="timer-type active" data-type="pomodoro">Pomodoro</div>
        <div class="timer-type" data-type="shortBreak">Short Break</div>
        <div class="timer-type" data-type="longBreak">Long Break</div>
      </div>
      <div class="timer-display" id="timer">25:00</div>
      <div class="controls">
        <button id="startBtn">Start</button>
        <button id="resetBtn">Reset</button>
      </div>
      <div class="timer-settings">
        <div>
          <label>Pomodoro: <input type="number" id="pomodoroTime" value="25" min="1"> min</label>
        </div>
        <div>
          <label>Short Break: <input type="number" id="shortBreakTime" value="5" min="1"> min</label>
        </div>
        <div>
          <label>Long Break: <input type="number" id="longBreakTime" value="15" min="1"> min</label>
        </div>
      </div>
    </div>

    <script>
      function toggleTodo() {
        const todoDiv = document.querySelector(".todo");
        if (todoDiv.style.display === "none" || todoDiv.style.display === "") {
          todoDiv.style.display = "block";
        } else {
          todoDiv.style.display = "none";
        }
      }

      function addTodo() {
        const todoInput = document.getElementById("todo_input");
        const todoList = document.getElementById("todo-list");
        const newTask = todoInput.value;
        if (newTask) {
          const listItem = document.createElement("li");
          const checkbox = document.createElement("input");
          checkbox.type = "checkbox";
          checkbox.id = "todo-" + todoList.children.length;
          
          const label = document.createElement("label");
          label.htmlFor = checkbox.id;
          label.textContent = newTask;

          listItem.appendChild(checkbox);
          listItem.appendChild(label);
          todoList.appendChild(listItem);
          
          todoInput.value = "";
        }
      }

      // Timer functionality
      let timer;
      let timeLeft = 25 * 60;
      let isRunning = false;
      let currentMode = 'pomodoro';

      const timerDisplay = document.getElementById('timer');
      const startBtn = document.getElementById('startBtn');
      const resetBtn = document.getElementById('resetBtn');
      const timerTypes = document.querySelectorAll('.timer-type');
      const pomodoroTimeInput = document.getElementById('pomodoroTime');
      const shortBreakTimeInput = document.getElementById('shortBreakTime');
      const longBreakTimeInput = document.getElementById('longBreakTime');

      function updateDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }

      function startTimer() {
        if (!isRunning) {
          isRunning = true;
          startBtn.textContent = 'Pause';
          timer = setInterval(() => {
            timeLeft--;
            updateDisplay();
            if (timeLeft === 0) {
              clearInterval(timer);
              isRunning = false;
              startBtn.textContent = 'Start';
              alert('Timer finished!');
              switchMode();
            }
          }, 1000);
        } else {
          clearInterval(timer);
          isRunning = false;
          startBtn.textContent = 'Resume';
        }
      }

      function resetTimer() {
        clearInterval(timer);
        isRunning = false;
        startBtn.textContent = 'Start';
        setTimeForMode(currentMode);
        updateDisplay();
      }

      function setTimeForMode(mode) {
        switch (mode) {
          case 'pomodoro':
            timeLeft = pomodoroTimeInput.value * 60;
            break;
          case 'shortBreak':
            timeLeft = shortBreakTimeInput.value * 60;
            break;
          case 'longBreak':
            timeLeft = longBreakTimeInput.value * 60;
            break;
        }
      }

      function switchMode() {
        if (currentMode === 'pomodoro') {
          currentMode = 'shortBreak';
        } else if (currentMode === 'shortBreak') {
          currentMode = 'pomodoro';
        } else {
          currentMode = 'pomodoro';
        }
        setTimeForMode(currentMode);
        resetTimer();
        updateActiveTimerType();
      }

      function updateActiveTimerType() {
        timerTypes.forEach(type => {
          if (type.dataset.type === currentMode) {
            type.classList.add('active');
          } else {
            type.classList.remove('active');
          }
        });
      }

      startBtn.addEventListener('click', startTimer);
      resetBtn.addEventListener('click', resetTimer);

      timerTypes.forEach(type => {
        type.addEventListener('click', () => {
          currentMode = type.dataset.type;
          updateActiveTimerType();
          resetTimer();
        });
      });

      // Add event listeners for time input changes
      pomodoroTimeInput.addEventListener('change', () => {
        if (currentMode === 'pomodoro') resetTimer();
      });
      shortBreakTimeInput.addEventListener('change', () => {
        if (currentMode === 'shortBreak') resetTimer();
      });
      longBreakTimeInput.addEventListener('change', () => {
        if (currentMode === 'longBreak') resetTimer();
      });

      // Initialize
      updateDisplay();
    </script>
  </body>
</html>