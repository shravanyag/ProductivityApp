<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meet</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
      document.title += " | " + ROOM_ID;
    </script>
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="/assets/images/favicon.png"
    />

    <!-- libraries -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <script defer src="lib/peerjs.min.js"></script>
    <script
      src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-auth.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
    
    <!-- scripts -->
    <script src="/js/firebaselogin.js"></script>
    <script src="/js/logout.js"></script>
    <script src="script.js" defer></script>
    
    <!-- css -->
    <link rel="stylesheet" href="/styles/room.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <style>
      .todo {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        display: none;
        z-index: 1000;
        width: 250px;
      }

      .todo-toggle {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1001;
      }

      .main__header {
        margin-top: 0;
      }

      #todo-list {
        list-style-type: none;
        padding-left: 0;
      }

      .main__message_container {
        display: flex;
        gap: 5px;
        margin-top: 10px;
      }

      .timer-widget {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: white;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 250px;
        z-index: 1000;
        cursor: move;
      }
      .timer-display {
        font-size: 34px;
        text-align: center;
        width: 50%;
        display:inline-block;
      }
      .controls {
        justify-content: space-between;
        position: absolute;
        top: 78px;
        right: 10px;
        display:inline-block;
      }
      .timer-widget button {
        padding: 5px 10px;
        font-size: 12px;
        cursor: pointer;
        border: 1px solid #ccc;
        border-radius: 7px;
      }
      .timer-types {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
      }
      .timer-type {
        padding: 5px;
        cursor: pointer;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 12px;
      }
      .timer-type.active {
        background-color: #e0e0e0;
        font-weight: bold;
      }
      .timer-settings {
        font-size: 12px;
      }
      .timer-settings input {
        width: 40px;
        margin-right: 5px;
      }

      #resetBtn i {
        cursor: pointer;
      }

      .main__controls {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-65%);
        transition: left 0.3s ease-in-out;
      }

      .main__controls.chat-open {
        left: calc(55% - 250px); 
      }

      .main__right {
        flex: 0 0 300px;
        display: none;
        transition: flex 0.3s ease-in-out;
        flex-direction: column;
      }

      .main__right.active {
        display: flex;
      }

      .main__chat_window {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
      }

      .main__message_container {
        display: flex;
        padding: 10px;
      }

      #chat_message {
        flex-grow: 1;
        margin-right: 10px;
      }

      #send_message {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 5px 10px;
        cursor: pointer;
      }

      .chat-message {
        background-color: #f1f1f1;
        border-radius: 5px;
        padding: 5px 10px;
        margin-bottom: 10px;
      }

      .chat-message .user-name {
        font-weight: bold;
        margin-right: 5px;
      }

      .main__right {
        flex: 0 0 300px;
        display: none;
        transition: flex 0.3s ease-in-out;
      }

      .main__right.active {
        display: flex;
        flex-direction: column;
      }

      .chat-toggle {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 50%;
        cursor: pointer;
        position: absolute;
        right: 20px;
        top: 20px;
        z-index: 1000;
      }

      @media (max-width: 768px) {
        .main__left {
          flex: 1;
        }
        
        .main__right.active {
          position: absolute;
          right: 0;
          top: 0;
          bottom: 0;
          width: 100%;
          max-width: 300px;
          background-color: white;
        }
      }
    </style>
  </head>
  <body>
    <div class="dark-light">
      <svg
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="1.5"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
      </svg>
    </div>

    <div class="app">
      <div class="wrapper">
        <div class="main">
          <div class="main__left">
            <div class="main__videos">
              <div id="video-grid"></div>
            </div>

            <div class="main__controls">
              <div class="main__controls__block">
                <div onclick="muteUnmute()" class="main__controls__button main__mute_button">
                  <i class="fas fa-microphone"></i>
                  <span>Mute</span>
                </div>
                <div onclick="playStop()" class="main__controls__button main__video_button">
                  <i class="fas fa-video"></i>
                  <span>Stop Video</span>
                </div>
                <div onclick="screenshare()" class="main__controls__button">
                  <i class="fas fa-photo-video"></i>
                  <span>ScreenShare</span>
                </div>
              </div>
              <div class="main__controls__block">
                <div onclick="window.location.href='/home'" class="main__controls__button">
                  <span class="leave_meeting"><a href="/home">Leave Meeting</a></span>
                </div>
              </div>
              <div class="main__controls__block">
                <div onclick="window.location.href='/chat/'+ROOM_ID" class="main__controls__button">
                  <span class="leave_meeting"><a onclick="window.location.href='/chat/'+ROOM_ID;">Go Back to ChatRoom</a></span>
                </div>
              </div>
            </div>
          </div>

          <button class="chat-toggle" onclick="toggleChat()">
            <i class="fas fa-comments"></i>
          </button>

          <div class="main__right">
            <div class="main__header">
              <h4>Chat</h4>
            </div>
            <div class="main__chat_window" id="chat_messages">
              <!-- Chat messages will be added here dynamically -->
            </div>
            <div class="main__message_container">
              <input
                id="chat_message"
                type="text"
                placeholder="Type message here..."
              />
              <button id="send_message" onclick="sendMessage()">Send</button>
            </div>
          </div>

          <button class="todo-toggle" onclick="toggleTodo()">To-Do List</button>

          <div class="todo">
            <div class="main__header" style="margin-top: 20px">
              <h4 style="color: black;">To-Do List</h4>
            </div>
            <div class="main__todo_window">
              <ul id="todo-list"></ul>
            </div>
            <div class="">
              <input
                id="todo_input"
                type="text"
                placeholder="Add new task..."
              />
              <button onclick="addTodo()">Add</button>
            </div>
          </div>
          
        </div>
      </div>
    </div>

    <div class="timer-widget" id="timerWidget">
      <div class="timer-types">
        <div class="timer-type active" data-type="pomodoro">Pomodoro</div>
        <div class="timer-type" data-type="shortBreak">Short Break</div>
        <div class="timer-type" data-type="longBreak">Long Break</div>
      </div>
      <div class="timer-display" id="timer">25:00</div>
      <div class="controls">
        <button id="startBtn">Start</button>
        <button id="resetBtn"><i class="fa fa-refresh"></i></button>
      </div>
      <div class="timer-settings">
        <div>
          <label>Pomodoro: <input type="number" id="pomodoroTime" value="25" min="1"> min</label>
        </div>
        <div>
          <label>Short Break: <input type="number" id="shortBreakTime" value="5" min="1"> min</label>
        </div>
        <div>
          <label>Long Break: <input type="number" id="longBreakTime" value="15" min="1"> min</label>
        </div>
      </div>
    </div>

    <script>
      function toggleTodo() {
      const todoDiv = document.querySelector(".todo");
      if (todoDiv.style.display === "none" || todoDiv.style.display === "") {
        todoDiv.style.display = "block";
      } else {
        todoDiv.style.display = "none";
      }
    }

    function addTodo() {
      const todoInput = document.getElementById("todo_input");
      const todoList = document.getElementById("todo-list");
      const newTask = todoInput.value.trim();
      
      if (newTask) {
        const listItem = document.createElement("li");
        listItem.innerHTML = `
          <input type="checkbox" id="todo-${todoList.children.length}">
          <label for="todo-${todoList.children.length}">${newTask}</label>
          <button onclick="removeTodo(this)">Delete</button>
        `;
        todoList.appendChild(listItem);
        todoInput.value = "";
      }
    }

    function removeTodo(button) {
      const listItem = button.parentElement;
      listItem.remove();
    }

    // Event listener for the todo input
    document.getElementById("todo_input").addEventListener("keypress", function(event) {
      if (event.key === "Enter") {
        event.preventDefault();
        addTodo();
      }
    });
      let isDragging = false,
        initialX,
        initialY,
        currentX = 0,
        currentY = 0,
        xOffset = 0,
        yOffset = 0;

      const timerWidget = document.getElementById("timerWidget");

      timerWidget.addEventListener("mousedown", dragStart);
      document.addEventListener("mousemove", drag);
      document.addEventListener("mouseup", dragEnd);

      function dragStart(e) {
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;
        isDragging = true;
      }

      function drag(e) {
        if (isDragging) {
          e.preventDefault();
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;

          xOffset = currentX;
          yOffset = currentY;

          setTranslate(currentX, currentY, timerWidget);
        }
      }

      function dragEnd() {
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
      }

      function setTranslate(xPos, yPos, el) {
        el.style.transform = `translate(${xPos}px, ${yPos}px)`;
      }

      const timerDisplay = document.getElementById("timer");
      const startBtn = document.getElementById("startBtn");
      const resetBtn = document.getElementById("resetBtn");
      const pomodoroTimeInput = document.getElementById("pomodoroTime");
      const shortBreakTimeInput = document.getElementById("shortBreakTime");
      const longBreakTimeInput = document.getElementById("longBreakTime");

      let timerType = "pomodoro";
      let timeRemaining = 25 * 60;
      let timerInterval;

      document.querySelectorAll(".timer-type").forEach((type) => {
        type.addEventListener("click", () => {
          document.querySelector(".timer-type.active").classList.remove("active");
          type.classList.add("active");
          timerType = type.dataset.type;
          resetTimer(); 
          // updateDisplay();
        });
      });

      startBtn.addEventListener("click", () => {
        if (timerInterval) {
          clearInterval(timerInterval);
          timerInterval = null;
          startBtn.textContent = "Start";
        } else {
          timerInterval = setInterval(countdown, 1000);
          startBtn.textContent = "Pause";
        }
      });

      resetBtn.addEventListener("click", resetTimer);

      function countdown() {
        if (timeRemaining > 0) {
          timeRemaining--;
          updateDisplay();
        } else {
          clearInterval(timerInterval);
          timerInterval = null;
          startBtn.textContent = "Start";
        }
      }

      function resetTimer() {
        clearInterval(timerInterval);
        timerInterval = null;
        timeRemaining = getInitialTime();
        updateDisplay();
        startBtn.textContent = "Start";
      }

      function updateDisplay() {
        const minutes = Math.floor(timeRemaining / 60);
        const seconds = timeRemaining % 60;
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }

      [pomodoroTimeInput, shortBreakTimeInput, longBreakTimeInput].forEach(input => {
        input.addEventListener('change', () => {
          if (timerType === input.id.replace('Time', '')) {
            resetTimer();
          }
        });
      });

      function getInitialTime() {
        if (timerType === "pomodoro") {
          return pomodoroTimeInput.value * 60;
        } else if (timerType === "shortBreak") {
          return shortBreakTimeInput.value * 60;
        } else {
          return longBreakTimeInput.value * 60;
        }
      }

      function toggleChat() {
        const chatPanel = document.querySelector('.main__right');
        const controlPanel = document.querySelector('.main__controls');
        chatPanel.classList.toggle('active');
        controlPanel.classList.toggle('chat-open');
        
        if (!chatPanel.classList.contains('active')) {
          document.getElementById('chat_messages').innerHTML = '';
        }
      }
      // Event listener for Enter key press
      document.getElementById('chat_message').addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
          event.preventDefault();
          sendMessage();
        }
      });
      
      
      function setUserName(name) {
        userName = name;
      }
      
      let userName = "User"; 
      
      firebase.auth().onAuthStateChanged(async function (user) {
        if (user) {
          const displayName = user.displayName || "User";
          setUserName(displayName);
        } else {
          setUserName("Guest");
        }
      });
      
      // Updated function to send and display messages
      function sendMessage() {
        const messageInput = document.getElementById('chat_message');
        const message = messageInput.value.trim();
        if (message) {
          const chatMessages = document.getElementById('chat_messages');
          const messageElement = document.createElement('div');
          messageElement.classList.add('chat-message');
          
          const userNameSpan = document.createElement('span');
          userNameSpan.classList.add('user-name');
          userNameSpan.textContent = userName + ": ";
          
          const messageText = document.createTextNode(message);
          
          messageElement.appendChild(userNameSpan);
          messageElement.appendChild(messageText);
          
          chatMessages.appendChild(messageElement);
          messageInput.value = '';
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
      }
    </script>
  </body>
</html>
